/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CourseAuction {
  export type BidStruct = {
    bidder: AddressLike;
    bidTime: BigNumberish;
    amount: BigNumberish;
  };

  export type BidStructOutput = [
    bidder: string,
    bidTime: bigint,
    amount: bigint
  ] & { bidder: string; bidTime: bigint; amount: bigint };
}

export interface CourseAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctions"
      | "bids"
      | "courseCertificate"
      | "createAuction"
      | "finalizeAuction"
      | "getBids"
      | "honeyToken"
      | "placeBid"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AuctionCreated" | "AuctionFinalized" | "BidPlaced"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "courseCertificate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAuction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBids",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "honeyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "courseCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "honeyToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
}

export namespace AuctionCreatedEvent {
  export type InputTuple = [
    courseId: BigNumberish,
    batchId: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    minPrice: BigNumberish
  ];
  export type OutputTuple = [
    courseId: bigint,
    batchId: bigint,
    startTime: bigint,
    endTime: bigint,
    minPrice: bigint
  ];
  export interface OutputObject {
    courseId: bigint;
    batchId: bigint;
    startTime: bigint;
    endTime: bigint;
    minPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionFinalizedEvent {
  export type InputTuple = [courseId: BigNumberish, batchId: BigNumberish];
  export type OutputTuple = [courseId: bigint, batchId: bigint];
  export interface OutputObject {
    courseId: bigint;
    batchId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    courseId: BigNumberish,
    batchId: BigNumberish,
    bidder: AddressLike,
    bidTime: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    courseId: bigint,
    batchId: bigint,
    bidder: string,
    bidTime: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    courseId: bigint;
    batchId: bigint;
    bidder: string;
    bidTime: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CourseAuction extends BaseContract {
  connect(runner?: ContractRunner | null): CourseAuction;
  waitForDeployment(): Promise<this>;

  interface: CourseAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        courseId: bigint;
        batchId: bigint;
        startTime: bigint;
        endTime: bigint;
        minPrice: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  bids: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [
      [string, bigint, bigint] & {
        bidder: string;
        bidTime: bigint;
        amount: bigint;
      }
    ],
    "view"
  >;

  courseCertificate: TypedContractMethod<[], [string], "view">;

  createAuction: TypedContractMethod<
    [
      courseId: BigNumberish,
      batchId: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      minPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  finalizeAuction: TypedContractMethod<
    [courseId: BigNumberish, batchId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBids: TypedContractMethod<
    [courseId: BigNumberish, batchId: BigNumberish],
    [CourseAuction.BidStructOutput[]],
    "view"
  >;

  honeyToken: TypedContractMethod<[], [string], "view">;

  placeBid: TypedContractMethod<
    [courseId: BigNumberish, batchId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        courseId: bigint;
        batchId: bigint;
        startTime: bigint;
        endTime: bigint;
        minPrice: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bids"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [
      [string, bigint, bigint] & {
        bidder: string;
        bidTime: bigint;
        amount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "courseCertificate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      courseId: BigNumberish,
      batchId: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      minPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeAuction"
  ): TypedContractMethod<
    [courseId: BigNumberish, batchId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBids"
  ): TypedContractMethod<
    [courseId: BigNumberish, batchId: BigNumberish],
    [CourseAuction.BidStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "honeyToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [courseId: BigNumberish, batchId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuctionCreated"
  ): TypedContractEvent<
    AuctionCreatedEvent.InputTuple,
    AuctionCreatedEvent.OutputTuple,
    AuctionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionFinalized"
  ): TypedContractEvent<
    AuctionFinalizedEvent.InputTuple,
    AuctionFinalizedEvent.OutputTuple,
    AuctionFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;

  filters: {
    "AuctionCreated(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;
    AuctionCreated: TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;

    "AuctionFinalized(uint256,uint256)": TypedContractEvent<
      AuctionFinalizedEvent.InputTuple,
      AuctionFinalizedEvent.OutputTuple,
      AuctionFinalizedEvent.OutputObject
    >;
    AuctionFinalized: TypedContractEvent<
      AuctionFinalizedEvent.InputTuple,
      AuctionFinalizedEvent.OutputTuple,
      AuctionFinalizedEvent.OutputObject
    >;

    "BidPlaced(uint256,uint256,address,uint256,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
  };
}
